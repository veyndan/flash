"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postcssModules = exports.makeModule = exports.sourceMappingURL = exports.getContext = exports.fileSyntax = exports.modulesPaths = exports.RELATIVE_PATH = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
exports.RELATIVE_PATH = /^\.\.?\//;
function modulesPaths() {
    let path = process.cwd();
    let { root } = (0, path_1.parse)(path);
    let found = [];
    while (path !== root) {
        const filename = (0, path_1.resolve)(path, 'node_modules');
        if ((0, fs_1.existsSync)(filename)) {
            found.push(filename);
        }
        path = (0, path_1.resolve)(path, '..');
    }
    return [...found];
}
exports.modulesPaths = modulesPaths;
function fileSyntax(filename) {
    if (filename.endsWith('.scss')) {
        return 'scss';
    }
    else if (filename.endsWith('.css')) {
        return 'css';
    }
    else {
        return 'indented';
    }
}
exports.fileSyntax = fileSyntax;
const SASS_PLUGIN_CONTEXT = Symbol();
function getContext(buildOptions) {
    let descriptor = Object.getOwnPropertyDescriptor(buildOptions, SASS_PLUGIN_CONTEXT);
    if (descriptor === undefined) {
        Object.defineProperty(buildOptions, SASS_PLUGIN_CONTEXT, descriptor = {
            value: {
                instances: 0
            }
        });
    }
    const instance = descriptor.value.instances++;
    return {
        instance,
        namespace: `sass-plugin-${instance}`,
        sourcemap: !!buildOptions.sourcemap,
        watched: buildOptions.watch ? {} : null
    };
}
exports.getContext = getContext;
function sourceMappingURL(sourceMap) {
    const data = Buffer.from(JSON.stringify(sourceMap), 'utf-8').toString('base64');
    return `/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${data} */`;
}
exports.sourceMappingURL = sourceMappingURL;
function requireTool(module, basedir) {
    try {
        return require(module);
    }
    catch (ignored) {
    }
    if (basedir)
        try {
            return require(require.resolve(module, { paths: [basedir] }));
        }
        catch (ignored) {
        }
    try {
        return require(require.resolve(module, { paths: [process.cwd()] }));
    }
    catch (e) {
        try {
            return require(module);
        }
        catch (ignored) {
            console.error(`Cannot find module '${module}', make sure it's installed. e.g. yarn add -D ${module}`, e);
            process.exit(1);
        }
    }
}
const cssTextModule = cssText => `\
export default \`
${cssText.replace(/([$`\\])/g, '\\$1')}\`;
`;
const cssResultModule = cssText => `\
import {css} from "lit-element/lit-element.js";
export default css\`
${cssText.replace(/([$`\\])/g, '\\$1')}\`;
`;
const styleModule = cssText => `\
const css = \`${cssText.replace(/([$`\\])/g, '\\$1')}\`;
document.head
    .appendChild(document.createElement("style"))
    .appendChild(document.createTextNode(css));
export {css};
`;
function makeModule(contents, type) {
    if (type === 'style') {
        return styleModule(contents);
    }
    else {
        return type === 'lit-css' ? cssResultModule(contents) : cssTextModule(contents);
    }
}
exports.makeModule = makeModule;
function postcssModules(options, plugins = []) {
    const postcss = requireTool('postcss', options.basedir);
    const postcssModulesPlugin = requireTool('postcss-modules', options.basedir);
    return async (source, dirname, path) => {
        let cssModule;
        const { css } = await postcss([
            postcssModulesPlugin({
                ...options,
                getJSON(cssFilename, json) {
                    cssModule = JSON.stringify(json, null, 2);
                }
            }),
            ...plugins
        ]).process(source, { from: path, map: false });
        return {
            contents: `${makeModule(css, 'style')}export default ${cssModule};`,
            loader: 'js'
        };
    };
}
exports.postcssModules = postcssModules;
//# sourceMappingURL=utils.js.map